#Connor Elliott
#January 5, 2025
#this program consists of the AI move finding system using scores for each piece to find highest value

import random

#assigns a point value to each piece
pieceScores = {"K": 0, "Q": 10, "R": 5, "B": 3, "N": 3, "p": 1}
#score value of each piece, uses this to find best moves based of total point score of pieces that could be captured.
CHECKMATE = 1000
#score for checkmate
STALEMATE = 0
#score for stalemate
DEPTH = 3
#how many moves in advance the AI looks

#picks and returns a random move
def findRandomMove(validMoves):
    return validMoves[random.randint(0, len(validMoves)-1)]
    #picks a random move out of the list of valid moves


#helper method to make first recursive call
def findBestMove(gs, validMoves):
    global nextMove 
    nextMove = None
    findMoveNegaMaxAlphaBeta(gs, validMoves, DEPTH, -CHECKMATE, CHECKMATE, 1 if gs.whiteToMove else -1)
    #calls nega max alpha beta to run
    return nextMove

def findMoveNegaMaxAlphaBeta(gs, validMoves, depth, alpha, beta, turnMultiplier):
    global nextMove
    if depth == 0:
        return turnMultiplier * scoreBoard(gs)
        #if the depth is 0 is ends
    
    #move ordering - implementing later
    maxScore = -CHECKMATE
    # the highest score is to get enemy into checkmate (1000 points)
    for move in validMoves:
        gs.makeMove(move)
        nextMoves = gs.getValidMoves()
        score = -findMoveNegaMaxAlphaBeta(gs, nextMoves, depth-1, -beta, -alpha, -turnMultiplier)
        if score > maxScore:
            maxScore = score
            #if the score of moves found is greater then the previously found max score, it become max score
            if depth == DEPTH:
                nextMove = move
                #when it looks 3 moves ahead, the next move is made
        gs.undoMove()
        if maxScore > alpha: #pruning happens
            alpha = maxScore
        if alpha >= beta:
            break
    return maxScore
    

#A positive score for this is good for white, negitive is good for black
def scoreBoard(gs):
    if gs.checkMate:
        if gs.whiteToMove:
            return -CHECKMATE #black wins
        else:
            return CHECKMATE #white wins
    elif gs.staleMate:
        return STALEMATE
        #if a stalemate happens

    score = 0
    #score is 0

    for row in gs.board:
        for square in row:
            if square[0] == 'w':
                score += pieceScores[square[1]]
                #adds the white score for the pieces into the score for next moves
            elif square[0] == 'b':
                score -= pieceScores[square[1]]
                #adds the black score for the pieces into the score for next moves

    return score

#score the board based on material
def scoreMaterial(board):
    score = 0
    #score starts at 0
    for row in board:
        for square in row:
            if square[0] == 'w':
                score += pieceScores[square[1]]
                #finds whites score
            elif square[0] == 'b':
                score -= pieceScores[square[1]]
                #finds blacks score

    return score
    #returns the final scores found
