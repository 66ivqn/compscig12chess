#Connor Elliott
#January 5th, 2025
#This file stores the logical information used in the main file such as all the valid moves for pieces, images for pieces, special rules such as castling and en passant and more.

class GameState():
    def __init__(self):
        #board is a 8x8 2d list
        #each element has 2 characters
        #the first character states what colour the piece is
        #the second piece states what type of piece it is
        #"--" means it is an empty square

        self.board = [
            ["bR", "bN", "bB", "bQ", "bK", "bB", "bN", "bR"],
            ["bp", "bp", "bp", "bp", "bp", "bp", "bp", "bp"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["wp", "wp", "wp", "wp", "wp", "wp", "wp", "wp"],
            ["wR", "wN", "wB", "wQ", "wK", "wB", "wN", "wR"]]
        #2D version of the chess board using the images and pieces
        self.moveFunctions = {'p': self.getPawnMoves, 'R': self.getRookMoves, 'N': self.getKnightMoves, 'B': self.getBishopMoves, 'Q': self.getQueenMoves, 'K': self.getKingMoves}

        self.whiteToMove = True
        #white starts, true when it is whites turn
        self.moveLog = []
        #tracks moves made
        self.whiteKingLocation = (7, 4)
        #starting position of thr white king
        self.blackKingLocation = (0, 4)
        #starting position of thr black king
        self.checkMate = False
        #variable used to determine if it is a checkmate
        self.staleMate = False
        #variable used to determine if it is a stalemate
        self.isEnpassantMove = () #coordinates where en passant is possible
        self.currentCastlingRight = CastleRights(True, True, True, True)
        #if castling is possible, there are 4 different ways to castle, black left/right, white left/right
        self.castleRightsLog = [CastleRights(self.currentCastlingRight.wks, self.currentCastlingRight.bks, self.currentCastlingRight.wqs, self.currentCastlingRight.bqs)]
        #keeps track of the castling rights


    #takes a move and executes it (will not work with castling, pawn promotion, and en-passent)
    def makeMove(self, move):
        self.board[move.startRow][move.startCol] = "--"
        self.board[move.endRow][move.endCol] = move.pieceMoved
        self.moveLog.append(move)#log the move so we can undo it later
        self.whiteToMove = not self.whiteToMove #swaps the player that can move
        #update king's location
        if move.pieceMoved == 'wK':
            self.whiteKingLocation = (move.endRow, move.endCol)
            #update white kings position if it is moved.
        elif move.pieceMoved == 'bK':
            self.blackKingLocation = (move.endRow, move.endCol)
            #update black kings position if it is moved

        #pawn Promotion
        if move.isPawnPromotion:
            self.board[move.endRow][move.endCol] = move.pieceMoved[0] + 'Q'
            #if a pawn reaches the end of the board, it becomes a queen

        #en passant
        if move.isEnpassantMove:
            self.board[move.startRow][move.endCol] = '--' #capture enpassant pawn

        #update enpassasnt possible variable
        if move.pieceMoved[1] == 'p' and abs(move.startRow - move.endRow) == 2: #only on 2 square pawn advances
            self.isEnpassantMove = ((move.startRow + move.endRow)//2, move.startCol)
        else:
            self.isEnpassantMove = ()

        #castle move
        if move.isCastleMove:
            if move.endCol - move.startCol == 2: #king side castle
                self.board[move.endRow][move.endCol-1] = self.board[move.endRow][move.endCol+1]#moves the rook into its new square
                self.board[move.endRow][move.endCol+1] = '--'#erase old rook
            else: #queen side castle
                self.board[move.endRow][move.endCol+1] = self.board[move.endRow][move.endCol-2] #moves the rook        
                self.board[move.endRow][move.endCol-2] = '--'#erase old rook
                
                #update castling rights - whenever there is a rook or king move
        self.updateCastleRights(move)
        self.castleRightsLog.append(CastleRights(self.currentCastlingRight.wks, self.currentCastlingRight.bks, self.currentCastlingRight.wqs, self.currentCastlingRight.bqs))


    #undoing a move
    def undoMove(self):
        if len(self.moveLog) != 0: #make sure there is a move to undo
            move = self.moveLog.pop()
            #deletes the move from the move log
            self.board[move.startRow][move.startCol] = move.pieceMoved
            self.board[move.endRow][move.endCol] = move.pieceCaptured
            self.whiteToMove = not self.whiteToMove #swaps the turns
            #update king's position
            if move.pieceMoved == 'wK':
                self.whiteKingLocation = (move.startRow, move.startCol)
                #resets white king position if it was moved and the move was undone
            elif move.pieceMoved == 'bK':
                self.blackKingLocation = (move.startRow, move.startCol)
                #resets black king position if it was moved and the move was undone

            #undo enpassant
            if move.isEnpassantMove:
                self.board[move.endRow][move.endCol] = '--' #leave landing square blank
                self.board[move.startRow][move.endCol] = move.pieceCaptured
                self.isEnpassantMove = (move.endRow, move.endCol)
            #undo 2 square pawn advance
            if move.pieceMoved[1] == 'p' and abs(move.startRow - move.endRow) == 2:
                self.isEnpassantMove = ()

            #undo castling rights
            self.castleRightsLog.pop() #get rid of new castling rights from move we are doing
            self.currentCastlingRight = self.castleRightsLog[-1] #set the current castle rights to the last one in the list

            #undo castle move
            if move.isCastleMove:
                if move.endCol - move.startCol ==2: #reset king side castle
                    self.board[move.endRow][move.endCol+1] = self.board[move.endRow][move.endCol-1]
                    self.board[move.endRow][move.endCol-1] = '--'
                else: # reset queen side castle
                    self.board[move.endRow][move.endCol-2] = self.board[move.endRow][move.endCol+1]
                    self.board[move.endRow][move.endCol+1] = '--'
            self.checkMate = False
            self.staleMate = False
            #resets checkmate and stalemate variables if a move is undone


    #update castle rights given the move
    def updateCastleRights(self, move):
        if move.pieceMoved == 'wK':
            self.currentCastlingRight.wks = False
            self.currentCastlingRight.wqs = False
            #if the white king is moved, castling is no longer possible
        elif move.pieceMoved == 'bK':
            self.currentCastlingRight.bks = False
            self.currentCastlingRight.bqs = False
            #if the black king is moved, castling is no longer possible
        elif move.pieceMoved == 'wR':
            if move.startRow == 7:
                if move.startCol == 0: #left rook
                    self.currentCastlingRight.wqs = False
                    #if the left white rook is moved, castling is no longer possible
                elif move.startCol == 7: #right rook
                    self.currentCastlingRight.wks = False
                    #if the right white rook is moved, castling is no longer possible
        elif move.pieceMoved == 'bR':
            if move.startRow == 0:
                if move.startCol == 0: #left rook
                    self.currentCastlingRight.bqs = False
                    #if the left black rook is moved, castling is no longer possible
                elif move.startCol == 7: #right rook
                    self.currentCastlingRight.bks = False
                    #if the right black rook is moved, castling is no longer possible
        

    def getValidMoves(self):
        tempEnpassantPossible = self.isEnpassantMove
        #temperary variable for if en passant is possible
        tempCastleRights = (CastleRights(self.currentCastlingRight.wks, self.currentCastlingRight.bks, self.currentCastlingRight.wqs, self.currentCastlingRight.bqs)) #copy the current castling rights
        #generate all possible moves
        moves = self.getAllPossibleMoves()
        if self.whiteToMove:
            self.getCastleMoves(self.whiteKingLocation[0], self.whiteKingLocation[1], moves)
        else:
            self.getCastleMoves(self.blackKingLocation[0], self.blackKingLocation[1], moves)
        #make each move
        for i in range(len(moves)-1, -1, -1): # removing elemnts going backwards through the list
            self.makeMove(moves[i])
        #generate opponents moves
        #see if oppenents moves attack the king
            self.whiteToMove = not self.whiteToMove
            if self.inCheck():
                moves.remove(moves[i])  #if they do attack the king, invalid move
            self.whiteToMove = not self.whiteToMove
            self.undoMove()
        if len(moves) == 0: #either checkmate or stalemate
            if self.inCheck():
                self.checkMate = True
                #if there are no moves and in check, it is a checkmate
            else:
                self.staleMate = True
                #if there are no moves and not in check, it is a stalemate

        self.isEnpassantMove = tempEnpassantPossible
        self.currentCastlingRight = tempCastleRights
        #get rid of both the temp en passant and castling variables
    
        return moves

#determine if current player is in check
    def inCheck(self):
        if self.whiteToMove:
            return self.squareUnderAttack(self.whiteKingLocation[0], self.whiteKingLocation[1])
        #if its whites move, square under attack is the white king location
        else:
            return self.squareUnderAttack(self.blackKingLocation[0], self.blackKingLocation[1])
        #if its blacks move, square under attack is the black king location

#determine if enemy can attack the square r, c
    def squareUnderAttack(self, r, c):
        self.whiteToMove = not self.whiteToMove #switch to opponets turn to see their moves
        oppMoves = self.getAllPossibleMoves()
        #look to see if the move is in the opponinants possible next moves to see what is under attack
        self.whiteToMove = not self.whiteToMove #switch turns back
        for move in oppMoves:
            if move.endRow == r and move.endCol == c: #square is under attack
                return True
        return False

    def getAllPossibleMoves(self):
        moves = []
        #possible moves are saved in a list called moves
        for r in range(len(self.board)): #number of rows
            for c in range(len(self.board[r])): #number of columns in a given row
                turn = self.board[r][c][0]
                if (turn == 'w' and self.whiteToMove) or (turn == 'b' and not self.whiteToMove):
                    piece = self.board[r][c][1]
                    self.moveFunctions[piece](r, c, moves) #calls the appropriate move function based on piece types
        return moves                

        #get all the pawn moves for the pawn located at row, col. and add these movesto the list
    def getPawnMoves(self, r, c, moves):
        if self.whiteToMove: #white pawn moves
            if self.board[r-1][c] == "--": #1 square pawn advance
                moves.append(Move((r, c), (r-1, c), self.board))
                if r == 6 and self.board[r-2][c] == "--": #2 square pawn advance
                    moves.append(Move((r, c), (r-2, c), self.board))

            if c-1 >= 0: 
                if self.board[r-1][c-1][0] == 'b': #enemy piece to capture
                    moves.append(Move((r, c), (r-1, c-1), self.board))
                elif (r-1, c-1) == self.isEnpassantMove: #enpassant capture
                    moves.append(Move((r, c), (r-1, c-1), self.board, isEmpassantMove=True))
                
            if c+1 <= 7:
                if self.board[r-1][c+1][0] == 'b': #enemy piece to capture
                      moves.append(Move((r, c), (r-1, c+1), self.board)) 
                elif (r-1, c+1) == self.isEnpassantMove: #enpassant capture
                    moves.append(Move((r, c), (r-1, c+1), self.board, isEmpassantMove=True)) 

        else: #black pawn moves
            if self.board[r + 1][c] == "--": #1 square black pawn advance
                moves.append(Move((r, c), (r + 1, c), self.board))
                # make move and add it to moves list
                if r == 1 and self.board[r + 2][c] == "--": #if the black pawn is in row 1, it can advance 2 squares
                    moves.append(Move((r, c), (r + 2, c), self.board))
                    #make move and add to move list

                #black pawn captures
            if c - 1 >= 0: # capture to the left
                if self.board[r + 1][c - 1][0] == 'w':
                    moves.append(Move((r, c), (r + 1, c - 1), self.board))
                elif (r+1, c-1) == self.isEnpassantMove: #enpassant capture
                    moves.append(Move((r, c), (r+1, c-1), self.board, isEmpassantMove=True))
            if c + 1 <= 7: #capture to the right
                if self.board[r + 1][c + 1][0] == 'w':
                    moves.append(Move((r, c), (r + 1, c + 1), self.board))
                elif (r+1, c+1) == self.isEnpassantMove: #enpassant capture
                    moves.append(Move((r, c), (r+1, c+1), self.board, isEmpassantMove=True))
                    
        #get all the rook moves for the rook located at row, col. and add these movesto the list
    def getRookMoves(self, r, c, moves):
        directions = ((-1, 0), (0, -1), (1, 0), (0, 1)) #direction the rook can move (up, left, down, right)
        enemyColor = "b" if self.whiteToMove else "w"
        for d in directions:
            for i in range(1, 8):
                endRow = r + d[0] * i
                #how far down the row it can move to stay on board
                endCol = c + d[1] * i
                #how far down the column it can move to stay in board
                if 0 <= endRow < 8 and 0 <= endCol < 8:
                    endPiece = self.board[endRow][endCol]
                    if endPiece == "--": #empty space Valid
                        moves.append(Move((r, c), (endRow, endCol), self.board))
                    elif endPiece[0] == enemyColor: #enemy piece Valid
                        moves.append(Move((r, c), (endRow, endCol), self.board))
                        break
                    else: #friendly piece invalid
                        break
                else: #off board
                    break

    def getKnightMoves(self, r, c, moves):
        knightMoves = ((-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)) #possible knight moves
        allyColor = "w" if self.whiteToMove else "b"
        for m in knightMoves:
            endRow = r + m[0]
            endCol = c + m[1]
            if 0 <= endRow < 8 and 0 <= endCol < 8:
                endPiece = self.board[endRow][endCol]
                #if the end row and column of move is on the board, move is made
                if endPiece[0] != allyColor: #not an ally piece (empty or enemy)
                    moves.append(Move((r, c), (endRow, endCol), self.board))

    def getBishopMoves(self, r, c, moves):
        directions = ((-1, -1), (-1, 1), (1, -1), (1, 1)) #bishop diagonal directions
        enemyColor = "b" if self.whiteToMove else "w"
        for d in directions:
            for i in range(1, 8): #can move a max of 7 squares
                endRow = r + d[0] * i
                endCol = c + d[1] * i
                if 0 <= endRow < 8 and 0 <= endCol < 8:
                    endPiece = self.board[endRow][endCol]
                    #if move on the board
                    if endPiece == "--": #empty space valid
                        moves.append(Move((r, c), (endRow, endCol), self.board))
                        #if move is to an empty square, make the move
                    elif endPiece[0] == enemyColor:
                        moves.append(Move((r, c), (endRow, endCol), self.board))
                        #if move is to an enemy piece, make the move
                        break
                    else:
                        break
                else:
                    break

    def getQueenMoves(self, r, c, moves):
        self.getRookMoves(r, c, moves)
        self.getBishopMoves(r, c, moves)
        #queen can move in all directions which is why it is all of the rook and bishop moves combined

    def getKingMoves(self, r, c, moves):
        kingMoves = ((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)) #the 8 directions the king can move
        allyColor = "w" if self.whiteToMove else "b"
        for i in range(8):
            endRow = r + kingMoves[i][0]
            endCol = c + kingMoves[i][1]
            if 0 <= endRow < 8 and 0 <= endCol < 8:
                endPiece = self.board[endRow][endCol]
                if endPiece[0] != allyColor: #not an ally piece (empty or enemy piece)
                    moves.append(Move((r, c), (endRow, endCol), self.board))
                    #if move is on the board, and it is not a piece of the same colour, make the move


    #generate all valid castle moves for th eking and add them to list of moves
    def getCastleMoves(self, r, c, moves):
        if self.squareUnderAttack(r, c):
            return #can't castle if in check
        if (self.whiteToMove and self.currentCastlingRight.wks) or (not self.whiteToMove and self.currentCastlingRight.bks):
            self.getKingsideCastleMoves(r, c, moves)
            #if king side castle is true, make castle move
        if (self.whiteToMove and self.currentCastlingRight.wqs) or (not self.whiteToMove and self.currentCastlingRight.bqs):
            self.getQueensideCastleMoves(r, c, moves)
            #if queen side castle is true, make castle move


    def getKingsideCastleMoves(self, r, c, moves):
        if self.board[r][c+1] == '--' and self.board[r][c+2] == '--':
            if not self.squareUnderAttack(r, c+1) and not self.squareUnderAttack(r, c+2):
                moves.append(Move((r, c), (r, c+2), self.board, isCastleMove=True))
                #if the squares in the column one to the right 1 and 2 are both empty, and the castle squares are not under attack, make the move

    def getQueensideCastleMoves(self, r, c, moves):
        if self.board[r][c-1] == '--' and self.board[r][c-2] == '--' and self.board[r][c-3] == '--':
            if not self.squareUnderAttack(r, c-1) and not self.squareUnderAttack(r, c-2):
                moves.append(Move((r, c), (r, c-2), self.board, isCastleMove=True))
                #if the squares in the column one to the left 1 and 2 are both empty, and the castle squares are not under attack, make the move


class CastleRights():
    def __init__(self, wks, bks, wqs, bqs):
        self.wks = wks
        self.bks = bks
        self.wqs = wqs
        self.bqs = bqs


class Move():
    # maps keys to values
    # key : value
    ranksToRows = {"1": 7, "2": 6, "3": 5, "4": 4, "5": 3, "6": 2, "7": 1, "8": 0}
    rowsToRanks = {v: k for k, v in ranksToRows.items()}
    filesToCols = {"a": 0, "b": 1, "c": 2, "d": 3, "e": 4, "f": 5, "g": 6, "h": 7}
    colsToFiles = {v: k for k, v in filesToCols.items()}
    #dictionaries thich turns the ranks into rows and the files into columns. THis is what will put a label on each row and column going from 1-8 and a-h.

    def __init__(self, start_s, end_s, board, isEmpassantMove=False, isCastleMove=False):
        self.startRow = start_s[0]
        self.startCol = start_s[1]
        self.endRow = end_s[0]
        self.endCol = end_s[1]
        self.pieceMoved = board[self.startRow][self.startCol]
        self.pieceCaptured = board[self.endRow][self.endCol]
        #pawn promotion
        self.isPawnPromotion = (self.pieceMoved == 'wp' and self.endRow == 0) or (self.pieceMoved == 'bp' and self.endRow == 7) #pawn promotion for white pawn
        #en passant 
        self.isEnpassantMove = isEmpassantMove
        if self.isEnpassantMove:
            self.pieceCaptured = 'wp' if self.pieceMoved == 'bp' else 'bp'
        #castle move
        self.isCastleMove = isCastleMove

        self.moveID = self.startRow * 1000 + self.startCol * 100 + self.endRow * 10 + self.endCol

    #overriding the equals method
    def __eq__(self, other):#compares one object to another object
        if isinstance(other, Move):
                return self.moveID == other.moveID
        return False

    def getChessNotation(self):
        return self.getRankFile(self.startRow, self.startCol) + self.getRankFile(self.endRow, self.endCol)

    def getRankFile(self, r, c):
        return self.colsToFiles[c] + self.rowsToRanks[r]
